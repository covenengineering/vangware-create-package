const eslint = require("@vangware/configs/.eslintrc.js");

module.exports = {
	...eslint,
	plugins: [...eslint.plugins, "jsdoc"],
	rules: {
		...eslint.rules,
		// Checks that @access tags use the correct values
		"jsdoc/check-access": "error",
		// Checks for correct alignment of JSDocs
		"jsdoc/check-alignment": "error",
		// Check once this is solved: https://github.com/eslint/eslint/issues/14745
		// "jsdoc/check-examples": "error",
		// Checks indentation of JSDoc comments unless is a code block ```
		"jsdoc/check-indentation": "error",
		// Avoids alignment of values
		"jsdoc/check-line-alignment": ["error", "never"],
		// Disabled because of false positives
		"jsdoc/check-param-names": "off",
		// Avoids duplication of property documentation
		"jsdoc/check-property-names": ["error", { enableFixer: true }],
		// Reports invalid block tag names
		"jsdoc/check-tag-names": "error",
		// Handled by TypeScript
		"jsdoc/check-types": "off",
		// Validates the format of some JSDoc tags
		"jsdoc/check-values": "error",
		// Validates JSDoc tags that should remain empty
		"jsdoc/empty-tags": "error",
		// Handled by TypeScript
		"jsdoc/implements-on-classes": "off",
		// No rules for description
		"jsdoc/match-description": "off",
		// General validations for multi/single line JSDocs
		"jsdoc/multiline-blocks": "error",
		// Keep description separated from the rest of the tags
		"jsdoc/newline-after-description": "error",
		// JSDoc block validation
		"jsdoc/no-bad-blocks": "error",
		// Just use ES6 default values
		"jsdoc/no-defaults": "error",
		// Just use the minimum number of asterisks
		"jsdoc/no-multi-asterisks": "error",
		// Handled by TypeScript (VSCode reports when you should move types to TS)
		"jsdoc/no-types": "off",
		// Handled by TypeScript
		"jsdoc/no-undefined-types": "off",
		// Keep it clean and consistent
		"jsdoc/require-asterisk-prefix": "error",
		// Description is required so docs are better
		"jsdoc/require-description": "error",
		// Makes description style better to be used in autogenerated documentation
		"jsdoc/require-description-complete-sentence": "error",
		// Requires example in every JSDoc
		"jsdoc/require-example": "error",
		// Not needed if we keep one function per file
		"jsdoc/require-file-overview": "off",
		// No hyphen before descriptions
		"jsdoc/require-hyphen-before-param-description": ["error", "never"],
		// We should always document functions
		"jsdoc/require-jsdoc": "error",
		// Disabled because of false positives
		"jsdoc/require-param": "off",
		// All params should have descriptions
		"jsdoc/require-param-description": "error",
		// All params should have names
		"jsdoc/require-param-name": "error",
		// Handled by TypeScript
		"jsdoc/require-param-type": "off",
		// @typedef should have properties when extending object
		"jsdoc/require-property": "error",
		// @typedef props should have descriptions
		"jsdoc/require-property-description": "error",
		// @typedef props should have names
		"jsdoc/require-property-name": "error",
		// Handled by TypeScript
		"jsdoc/require-property-type": "off",
		// @returns should be defined
		"jsdoc/require-returns": "error",
		// @returns format checking
		"jsdoc/require-returns-check": "error",
		// @returns should have a description
		"jsdoc/require-returns-description": "error",
		// Handled by TypeScript
		"jsdoc/require-returns-type": "off",
		// Document throw statements
		"jsdoc/require-throws": "error",
		// Document yields
		"jsdoc/require-yields": "error",
		// Yield formatting
		"jsdoc/require-yields-check": "error",
		// Keep a consistent line spacing between tags
		"jsdoc/tag-lines": "error",
		// Handled by TypeScript
		"jsdoc/valid-types": "off",
	},
	settings: {
		jsdoc: {
			structuredTags: {
				category: {
					name: "text",
					type: false,
				},
			},
		},
	},
};
